#+TITLE: Lab book Fluotracify
#+AUTHOR: Alexander Seltmann
#+LANGUAGE: en
#+PROPERTY: header-args :eval never-export :exports both
#+OPTIONS: toc:3
#+HTML_HEAD_EXTRA: <style type="text/css">.example {background-color: #FBFBBF;}</style>
#+HTML_HEAD_EXTRA: <style type="text/css">pre.src-emacs-lisp {background-color: #F7ECFB;}</style>
#+HTML_HEAD_EXTRA: <style type="text/css">pre.src-sh {background-color: #F0FBE9;}</style>
#+HTML_HEAD_EXTRA: <style type="text/css">pre.src-tmux {background-color: #E1EED8;}</style>
#+HTML_HEAD_EXTRA: <style type="text/css">pre.src-python {background-color: #E6EDF4;}</style>
#+HTML_HEAD_EXTRA: <style type="text/css">pre.src-jupyter-python {background-color: #FAEAE1;}</style>

* README
** General:
   - This file corresponds to my lab book for my doctoral thesis tackling
     artifact correction in Fluorescence Correlation Spectroscopy (FCS)
     measurements using Deep Neural Networks. It also contains notes taken
     during the process of setting up this workflow for reproducible research.
   - This file contains explanations of how things are organized, of the
     workflow for doing experiments, changes made to the code, and the observed
     behavior in the "* Data" section.
   - The branching model used is described in [[http://starpu-simgrid.gforge.inria.fr/misc/SIGOPS_paper.pdf][this paper]]. Therefore: if you
     are interested in the "* Data" section, you have to =git clone= the /data/
     branch of the repository. The /master/ branch is clean from any results, it
     contains only source code and the analysis.
   - This project is my take on [[https://en.wikipedia.org/wiki/Open-notebook_science][Open-notebook science]]. The idea was postulated in
     a blog post in 2006:
     #+BEGIN_QUOTE
     ... there is a URL to a laboratory notebook that is freely available and
     indexed on common search engines. It does not necessarily have to look like
     a paper notebook but it is essential that all of the information available
     to the researchers to make their conclusions is equally available to the
     rest of the world ---Jean-Claude Bradley
     #+END_QUOTE
   - Proposal on how to deal with truly private data (e.g. notes from a
     confidential meeting with a colleague), which might otherwise be noted in a
     normal Lab notebook: do not include them here. Only notes relevant to the
     current project should be taken
** Code block languages used in this document

   #+BEGIN_SRC sh
     # This is a sh block for shell / bash scripting. In the context of this file,
     # these blocks are mainly used for operations on my local computer.
     # In the LabBook.html rendering of this document, these blocks will have a
     # light green colour (#F0FBE9)
   #+END_SRC

   #+BEGIN_SRC tmux
     # This block can open and access tmux sessions, used for shell scripting on
     # remote computing clusters.
     # In the LabBook.html rendering of this document, these blocks will have a
     # distinct light green colour (#E1EED8)
   #+END_SRC

   #+BEGIN_SRC python
     # This is a python block. In the context of this file, it is seldomly used
     # (only for examplary scripts.)
     # In the LabBook.html rendering of this document, these blocks will have a
     # light blue colour (#E6EDF4)
   #+END_SRC

   #+BEGIN_SRC jupyter-python :session /jpy:localhost#8889:704d35be-572a-4268-a70b-565164b8620f
     # This is a jupyter-python block. The code is sent to a jupyter kernel running
     # on a remote high performance computing cluster. Most of my jupyter code is
     # executed this way.
     # In the LabBook.html rendering of this document, these blocks will have a
     # light orange colour (#FAEAE1)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     ;; This is a emacs-lisp block, the language used to customize Emacs, which is
     ;; sometimes necessary, since the reproducible workflow of this LabBook is
     ;; tightly integrated with Emacs and org-mode.
     ;; In the LabBook.html rendering of this document, these blocks will have a
     ;; light violet colour (#F7ECFB)
   #+END_SRC

   #+begin_example
     This is a literal example block. It can be used very flexibly - in the context
     of this document the output of most code blocks is displayed this way.
     In the LabBook.html rendering of this document, these blocks will have a light
     yellow colour (#FBFBBF)
   #+end_example

** Experiments workflow:
   1) Create a new branch from =master=
   2) Print out the git log from the latest commit and the metadata
   3) Call the analysis scripts, follow the principles outlined in
      [[* Organization of code]]
   4) All machine learning runs are saved in =data/mlruns=, all other data in
      =data/#experiment-name=
   5) Add a "** #experiment-name" section to this file under [[* Data]]
   6) Commit/push the results of this separate branch
   7) Merge this new branch with the remote =data= branch
** Example for experimental setup procedure

*** Setting starting a jupyter kernel from a remote jupyter session using =emacs-jupyter= in =org babel=
    :PROPERTIES:
    :CUSTOM_ID: sec-jupyter-setup
    :END:

** tools used (notes)
*** Emacs =magit=
   - =gitflow-avh= (=magit-flow=) to follow the flow
   - possibly https://github.com/magit/magit-annex for large files. Follow this:
     https://git-annex.branchable.com/walkthrough/
   - maybe check out git-toolbelt at some point
     https://github.com/nvie/git-toolbelt#readme with
     https://nvie.com/posts/git-power-tools/
*** jupyter
   - emacs jupyter for running and connecting to kernel on server:
     https://github.com/dzop/emacs-jupyter
   - if I actually still would use .ipynb files, these might come handy:
     + jupytext: https://github.com/mwouts/jupytext
     + nbstripout: https://github.com/kynan/nbstripout
*** mlflow
   - https://docs.faculty.ai/user-guide/experiments/index.html and
     https://docs.microsoft.com/en-us/azure/databricks/_static/notebooks/hls-image-processing/02-image-segmentation-dl.html
*** tensorflow
   - https://www.tensorflow.org/tensorboard/image_summaries

* Template for data entry and setup notes:
** exp-#date-#title
*** git:

    #+begin_src sh
    git log -1
    #+end_src

*** System Metadata:

    #+NAME: jp-metadata
    #+BEGIN_SRC jupyter-python :var _long="true"
      import os
      import pprint

      ramlist = os.popen('free -th').readlines()[-1].split()[1:]

      print('No of CPUs in system:', os.cpu_count())
      print('No of CPUs the current process can use:',
            len(os.sched_getaffinity(0)))
      print('load average:', os.getloadavg())
      print('os.uname(): ', os.uname())
      print('PID of process:', os.getpid())
      print('RAM total: {}, RAM used: {}, RAM free: {}'.format(
          ramlist[0], ramlist[1], ramlist[2]))

      !echo the current directory: $PWD
      !echo My disk usage:
      !df -h
      if _long:
          %conda list
          pprint.pprint(dict(os.environ), sort_dicts=False)

    #+END_SRC

*** Tmux setup and scripts
    :PROPERTIES:
    :CUSTOM_ID: scripts-tmux
    :END:

    #+NAME: setup-tmux
    #+BEGIN_SRC sh :session local
    rm ~/.tmux-local-socket-remote-machine
    REMOTE_SOCKET=$(ssh ara 'tmux ls -F "#{socket_path}"' | head -1)
    echo $REMOTE_SOCKET
    ssh ara -tfN \
        -L ~/.tmux-local-socket-remote-machine:$REMOTE_SOCKET
    #+END_SRC

    #+RESULTS: setup-tmux
    | rm:                                  | cannot                               | remove    | '/home/lex/.tmux-local-socket-remote-machine': | No | such | file | or | directory |
    | ye53nis@ara-login01.rz.uni-jena.de's | password:                            |           |                                                |    |      |      |    |           |
    | /tmp/tmux-67339/default              |                                      |           |                                                |    |      |      |    |           |
    | >                                    | ye53nis@ara-login01.rz.uni-jena.de's | password: |                                                |    |      |      |    |           |

*** SSH tunneling
    :PROPERTIES:
    :CUSTOM_ID: ssh-tunneling
    :END:

    Different applications can be run on the remote compute node. If I want to
    access them at the local machine, and open them with the browser, I use this
    tunneling script.

    #+NAME: ssh-tunnel
    #+BEGIN_SRC sh :session org-tunnel :var port="8889" :var node="node001"
    ssh -t -t ara -L $port:localhost:$port ssh $node -L $port:Localhost:$port
    #+END_SRC

    Apps I use that way:
    - Jupyter lab for running Python 3-Kernels
    - TensorBoard
    - Mlflow ui

*** jupyter scripts
    :PROPERTIES:
    :CUSTOM_ID: scripts-jp
    :END:

    Starting a jupyter instance on a server where the necessary libraries are
    installed is easy using this script:

    #+NAME: jpt-tmux
    #+BEGIN_SRC tmux :socket ~/.tmux-local-socket-remote-machine
    conda activate tf-nightly
    export PORT=8889
    export XDG_RUNTIME_DIR=''
    export XDG_RUNTIME_DIR=""
    jupyter lab --no-browser --port=$PORT
    #+END_SRC

    On the compute node of the HPC, the users' environment is managed through
    module files using the system [[https://lmod.readthedocs.io][Lmod]]. The =export XDG_RUNTIME_DIR= statements
    are needed because of a jupyter bug which did not let it start. Right now,
    =ob-tmux= does not support a =:var= header like normal =org-babel= does. So
    the =$port= variable has to be set here in the template.

    Now this port has to be tunnelled on our local computer (See
    [[#ssh-tunneling]]). While the tmux session above keeps running, no matter if
    Emacs is running or not, this following ssh tunnel needs to be active
    locally to connect to the notebook. If you close Emacs, it would need to be
    reestablished (see [[* Reconnect]])

** Setup notes
*** Setting up a tmux connection from using =ob-tmux= in =org-babel=
    :PROPERTIES:
    :CUSTOM_ID: sec-tmux-setup
    :END:
    - prerequisite: tmux versions need to be the same locally and on the server.
      Let's verify that now.
      - the local tmux version:

        #+BEGIN_SRC sh
        tmux -V
        #+END_SRC

        #+RESULTS:
        : tmux 3.0a

      - the remote tmux version:

       #+BEGIN_SRC sh :session local
        ssh ara tmux -V
      #+END_SRC

        #+RESULTS:
        | ye53nis@ara-login01.rz.uni-jena.de's | password: |
        | tmux                                 | 3.0a      |

    - as is described in [[https://github.com/ahendriksen/ob-tmux][the ob-tmux readme]], the following code snippet creates
      a socket on the remote machine and forwards this socket to the local
      machine (note that =socket_path= was introduced in tmux version 2.2)

      #+BEGIN_SRC sh :session local
      REMOTE_SOCKET=$(ssh ara 'tmux ls -F "#{socket_path}"' | head -1)
      echo $REMOTE_SOCKET
      ssh ara -tfN \
          -L ~/.tmux-local-socket-remote-machine:$REMOTE_SOCKET
      #+END_SRC

      #+RESULTS:
      | ye53nis@ara-login01.rz.uni-jena.de's | password:                            |           |
      | /tmp/tmux-67339/default              |                                      |           |
      | >                                    | ye53nis@ara-login01.rz.uni-jena.de's | password: |

    - now a new tmux session with name =ob-NAME= is created when using a code
      block which looks like this: =#+BEGIN_SRC tmux :socket
      ~/.tmux-local-socket-remote-machine :session NAME=
    - Commands can be sent now to the remote tmux session, BUT note that the
      output is not printed yet
    - there is a workaround for getting output back to our LabBook.org: A [[#scripts-tmux][script]]
      which allows to print the output from the tmux session in an
      =#+begin_example=-Block below the tmux block by pressing =C-c C-o= or =C-c
      C-v C-o= when the pointer is inside the tmux block.

*** =emacs-jupyter= Setup

    =Emacs-jupyter= aims to be an API for a lot of functionalities of the
    =jupyter= project. The documentation can be found on [[https://github.com/dzop/emacs-jupyter][GitHub]].

    1. For the *whole document*: connect ot a running jupyter instance
       1. =M-x jupyter-server-list-kernels=
          1. set server URL, e.g. =http://localhost:8889=
          2. set websocket URL, e.g. =http://localhost:8889=
       2. two possibilities
          1. kernel already exists $\to$ list of kernels and =kernel-ID= is displayed
          2. kernel does not exist $\to$ prompt asks if you want to start one $\to$
             *yes* $\to$ type kernel you want to start, e.g. =Python 3=
    2. In the *subtree* where you want to use =jupyter-python= blocks with =org
       babel=
       1. set the =:header-args:jupyter-python :session
          /jpy:localhost#kernel:8889-ID=
       2. customize the output folder using the following org-mode variable:
          #+BEGIN_SRC  emacs-lisp
            (setq org-babel-jupyter-resource-directory "./data/exp-test/plots")
          #+END_SRC

          #+RESULTS:
          : ./data/exp-test/plots
    3. For each *individual block*, the following customizations might be useful
       1. jupyter kernels can return multiple kinds of rich output (images,
          html, ...) or scalar data (plain text, numbers, lists, ...). To force
          a plain output, use =:results scalar=. To show the output in the
          minibuffer only, use =:results silent=
       2. to change the priority of different rich outputs, use =:display=
          header argument, e.g. =:display text/plain text/html= prioritizes
          plain text over html. All supported mimetypes in default order:
          1. text/org
          2. image/svg+xml, image/jpeg, image/png
          3. text/html
          4. text/markdown
          5. text/latex
          6. text/plain
       3. We can set jupyter to output pandas DataFrames as org tables
          automatically using the source block header argument =:pandoc t=
       4. useful keybindings
          - =M-i= to open the documentation for wherever your pointer is (like
            pressing =Shift-TAB= in Jupyter notebooks)
          - =C-c C-i= to interrupt the kernel, =C-c C-r= to restart the kernel

* Organization of git
** remote/origin/master branch:
  - contains all the source code in folder **src/** which is used for experiments.
  - contains the **LabBook.org** template
  - contains setup- and metadata files such as **MLproject** or **conda.yaml**
  - the log contains only lasting alterations on the folders and files mentioned
    above, which are e.g. used for conducting experiments or which introduce new
    features. Day-to-day changes in code
** remote/origin/exp### branches:
  - if an experiment is done, the code and templates will be branched out from
    *master* in an *#experiment-name* branch, ### meaning some meaningful
    descriptor.
  - all data generated during the experiment (e.g. .csv files, plots, images,
    etc), is stored in a folder with the name **data/#experiment-name**, except
    machine learning-specific data and metadata from `mlflow` runs, which are
    saved under **data/mlruns** (this allows easily comparing machine learning
    runs with different experimental settings)
  - The **LabBook.org** file is essential
    - If possible, all code is executed from inside this file (meaning analysis
      scripts or calling the code from the **scr/** directory).
    - All other steps taken during an experiment are noted down, as well as
      conclusions or my thought process while conducting the experiment
    - Provenance data, such as metadata about the environment the code was
      executed in, the command line output of the code, and some plots
** remote/origin/develop branch:
  - this is the branch I use for day to day work on features and exploration.
    All of my current activity can be followed here.
** remote/origin/data branch:
  - contains a full cronicle of the whole research process
  - all *#experiment-name* branches are merged here. Afterwards the original
    branch is deleted and on the data branch there is a *Git tag* which shows
    the merge commit to make accessing single experiments easy.
  - the *develop* branch is merged here as well.

** Git TAGs
*** Stable versions:
*** All tags from git:
   #+begin_src sh :results output
    git push origin --tags
    git tag -n1
   #+end_src

   #+RESULTS:
   : exp-200402-test Merge branch 'exp-200402-test' into data
* Organization of code
** scripts:
** src/
*** fluotracify/
**** imports/
**** simulations/
**** training/
**** applications/
**** doc/
    - use Sphinx
      - follow this: https://daler.github.io/sphinxdoc-test/includeme.html
      - evtl export org-mode Readme to rst via https://github.com/msnoigrs/ox-rst
      - possibly heavily use
        http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html
    - for examples sphinx-galleries could be useful
      https://sphinx-gallery.github.io/stable/getting_started.html

*** nanosimpy/
    - cloned from dwaithe with refactoring for Python 3-compatibility

* Changes in this repository (without "* Data" in this file)
** Changes in LabBook.org (without "* Data")
*** 2020-11-04
    - update "jupyter scripts" in  [[* Template for data entry and setup notes:]]
      for new conda environment on server (now =conda activate tf-nightly=)
*** 2020-05-31
    - extend general documentation in README
    - Add code block examples
    - extend documentation on experiment workflow
    - move setup notes from README to "Template for data entry and setup notes"
    - remove emacs-lisp code for custom tmux block functions (not relevant
      enough)
    - change named "jpt-tmux" from starting a jupyter notebook to starting
      jupyter lab. Load a conda environment instead of using Lmod's =module
      load=
*** 2020-05-07
    - extend documentation on git model
    - extend documentation on jupyter setup
*** 2020-04-22
    - added parts of README which describe the experimental process
    - added templates for system metadata, tmux, jupyter setup
    - added organization of code
*** 2020-03-30
    - set up lab book and form git repo accoring to setup by Luka Stanisic et al
** Changes in src/fluotracify
* Data
** exp-201231-clustersim
   - this experiment is to document the simulation of fluorescence timetraces
     with "bright cluster" artifacts
*** connect to jupyter notebook
    1. Request compute node via tmux
    #+BEGIN_SRC tmux :socket ~/.tmux-local-socket-remote-machine :session jpmux
    cd /
    srun -p s_standard --time=7-10:00:00 --ntasks-per-node=24 --mem-per-cpu=2000 --pty bash
    #+END_SRC
    2.
    #+CALL: jpt-tmux[:session jpmux]

    #+RESULTS:
    #+begin_example
      (tf-nightly) [ye53nis@node146 /]$ jupyter lab --no-browser --port=$PORT
      [I 00:02:39.372 LabApp] JupyterLab extension loaded from /home/ye53nis/.conda/envs/tf-nightly/lib/python3.8/site-packages/jupyterlab
      [I 00:02:39.372 LabApp] JupyterLab application directory is /home/ye53nis/.conda/envs/tf-nightly/share/jupyter/lab
      [I 00:02:39.375 LabApp] Serving notebooks from local directory: /
      [I 00:02:39.375 LabApp] Jupyter Notebook 6.1.4 is running at:
      [I 00:02:39.375 LabApp] http://localhost:9999/?token=93791464f12bacd92a8343c1a3be84117c0674d5703fd278
      [I 00:02:39.375 LabApp]  or http://127.0.0.1:9999/?token=93791464f12bacd92a8343c1a3be84117c0674d5703fd278
      [I 00:02:39.375 LabApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
      [C 00:02:39.380 LabApp]

          To access the notebook, open this file in a browser:
              file:///home/ye53nis/.local/share/jupyter/runtime/nbserver-54410-open.html
          Or copy and paste one of these URLs:
              http://localhost:9999/?token=93791464f12bacd92a8343c1a3be84117c0674d5703fd278
           or http://127.0.0.1:9999/?token=93791464f12bacd92a8343c1a3be84117c0674d5703fd278
    #+end_example
    3. Create SSH tunnel

    #+CALL: ssh-tunnel(port="9999", node="node146")

    #+RESULTS:
    | sh-5.0$           | sh-5.0$   | ye53nis@ara-login01.rz.uni-jena.de's | password: |    |          |      |      |             |
    | ye53nis@node146's | password: |                                      |           |    |          |      |      |             |
    | Last              | login:    | Thu                                  | Dec       | 31 | 02:11:35 | 2020 | from | login01.ara |
    4. connect to Python 3 kernel using =jupyter-server-list-kernels=
       #+begin_example
       python3           f6f8ea4a-c473-459c-93b6-4984b0987ff8   a few seconds ago    starting   0
       #+end_example
*** record metadata
    :PROPERTIES:
    :header-args:jupyter-python: :session /jpy:localhost#9999:f6f8ea4a-c473-459c-93b6-4984b0987ff8
    :END:

    #+BEGIN_SRC jupyter-python
      %cd /beegfs/ye53nis/drmed-git/
    #+END_SRC

    #+RESULTS:
    : /beegfs/ye53nis/drmed-git

    #+BEGIN_SRC jupyter-python
      !git log -1
      !git status
    #+END_SRC

    #+RESULTS:
    #+begin_example
      commit 90315560e472cfec38b0f927e905da1635d25240
      Author: Apoplex <oligolex@vivaldi.net>
      Date:   Thu Dec 31 01:32:25 2020 +0100

          change metadata gathering and add docs
      # On branch exp-201231-clustersim
      # Changes not staged for commit:
      #   (use "git add <file>..." to update what will be committed)
      #   (use "git checkout -- <file>..." to discard changes in working directory)
      #   (commit or discard the untracked or modified content in submodules)
      #
      #	modified:   src/nanosimpy (untracked content)
      #
      # Untracked files:
      #   (use "git add <file>..." to include in what will be committed)
      #
      #	data/
      #	experiment_params.csv
      #	mlruns/
      #	tramp.YDPCnB
      no changes added to commit (use "git add" and/or "git commit -a")
    #+end_example

    #+CALL: jp-metadata(_long='True)

    #+RESULTS:
    #+begin_example
      No of CPUs in system: 72
      No of CPUs the current process can use: 24
      load average: (16.0, 16.04, 16.01)
      os.uname():  posix.uname_result(sysname='Linux', nodename='node146', release='3.10.0-957.1.3.el7.x86_64', version='#1 SMP Thu Nov 29 14:49:43 UTC 2018', machine='x86_64')
      PID of process: 173820
      RAM total: 199G, RAM used: 70G, RAM free: 99G
      the current directory: /beegfs/ye53nis/drmed-git
      My disk usage:
      Filesystem           Size  Used Avail Use% Mounted on
      /dev/sda1             50G  3.2G   47G   7% /
      devtmpfs              94G     0   94G   0% /dev
      tmpfs                 94G  297M   94G   1% /dev/shm
      tmpfs                 94G  195M   94G   1% /run
      tmpfs                 94G     0   94G   0% /sys/fs/cgroup
      nfs01-ib:/cluster    2.0T  473G  1.6T  24% /cluster
      nfs03-ib:/pool/work  100T   70T   31T  70% /nfsdata
      nfs02-ib:/data01      88T   71T   17T  81% /data01
      nfs01-ib:/home        80T   71T  9.8T  88% /home
      /dev/sda3            6.0G  435M  5.6G   8% /var
      /dev/sda5            2.0G   34M  2.0G   2% /tmp
      /dev/sda6            169G   18G  152G  11% /local
      beegfs_nodev         524T  437T   88T  84% /beegfs
      tmpfs                 19G     0   19G   0% /run/user/67339
      # packages in environment at /home/ye53nis/.conda/envs/tf-nightly:
      #
      # Name                    Version                   Build  Channel
      _libgcc_mutex             0.1                        main
      absl-py                   0.11.0                   pypi_0    pypi
      alembic                   1.4.1                      py_0    conda-forge
      appdirs                   1.4.4              pyh9f0ad1d_0    conda-forge
      argon2-cffi               20.1.0           py38h7b6447c_1
      asn1crypto                1.4.0              pyh9f0ad1d_0    conda-forge
      asteval                   0.9.16             pyh5ca1d4c_0    conda-forge
      astunparse                1.6.3                    pypi_0    pypi
      async_generator           1.10                       py_0
      attrs                     20.2.0                     py_0
      azure-core                1.8.2              pyh9f0ad1d_0    conda-forge
      azure-storage-blob        12.5.0             pyh9f0ad1d_0    conda-forge
      backcall                  0.2.0                      py_0
      blas                      1.0                         mkl
      bleach                    3.2.1                      py_0
      blinker                   1.4                        py_1    conda-forge
      brotlipy                  0.7.0           py38h7b6447c_1000
      ca-certificates           2020.12.5            ha878542_0    conda-forge
      cachetools                4.1.1                    pypi_0    pypi
      certifi                   2020.12.5        py38h578d9bd_0    conda-forge
      cffi                      1.14.3           py38he30daa8_0
      chardet                   3.0.4                 py38_1003
      click                     7.1.2              pyh9f0ad1d_0    conda-forge
      cloudpickle               1.6.0                      py_0    conda-forge
      configparser              5.0.1                      py_0    conda-forge
      cryptography              3.1.1            py38h1ba5d50_0
      cycler                    0.10.0                   py38_0
      databricks-cli            0.9.1                      py_0    conda-forge
      dbus                      1.13.18              hb2f20db_0
      decorator                 4.4.2                      py_0
      defusedxml                0.6.0                      py_0
      docker-py                 4.3.1            py38h32f6830_1    conda-forge
      docker-pycreds            0.4.0                      py_0    conda-forge
      entrypoints               0.3                      py38_0
      expat                     2.2.10               he6710b0_2
      fcsfiles                  2020.9.18                pypi_0    pypi
      flask                     1.1.2              pyh9f0ad1d_0    conda-forge
      flatbuffers               1.12                     pypi_0    pypi
      fontconfig                2.13.0               h9420a91_0
      freetype                  2.10.4               h5ab3b9f_0
      future                    0.18.2           py38h578d9bd_2    conda-forge
      gast                      0.3.3                    pypi_0    pypi
      gitdb                     4.0.5                      py_0    conda-forge
      gitpython                 3.1.11                     py_0    conda-forge
      glib                      2.66.1               h92f7085_0
      google-auth               1.23.0                   pypi_0    pypi
      google-auth-oauthlib      0.4.2                    pypi_0    pypi
      google-pasta              0.2.0                    pypi_0    pypi
      gorilla                   0.3.0                      py_0    conda-forge
      grpcio                    1.32.0                   pypi_0    pypi
      gst-plugins-base          1.14.0               hbbd80ab_1
      gstreamer                 1.14.0               hb31296c_0
      gunicorn                  20.0.4           py38h32f6830_2    conda-forge
      h5py                      2.10.0                   pypi_0    pypi
      icu                       58.2                 he6710b0_3
      idna                      2.10                       py_0
      importlib-metadata        2.0.0                      py_1
      importlib_metadata        2.0.0                         1
      intel-openmp              2020.2                      254
      ipykernel                 5.3.4            py38h5ca1d4c_0
      ipython                   7.18.1           py38h5ca1d4c_0
      ipython_genutils          0.2.0                    py38_0
      isodate                   0.6.0                      py_1    conda-forge
      itsdangerous              1.1.0                      py_0    conda-forge
      jedi                      0.17.2                   py38_0
      jinja2                    2.11.2                     py_0
      jpeg                      9b                   h024ee3a_2
      json5                     0.9.5                      py_0
      jsonschema                3.2.0                      py_2
      jupyter_client            6.1.7                      py_0
      jupyter_core              4.6.3                    py38_0
      jupyterlab                2.2.6                      py_0
      jupyterlab_pygments       0.1.2                      py_0
      jupyterlab_server         1.2.0                      py_0
      keras-preprocessing       1.1.2                    pypi_0    pypi
      kiwisolver                1.3.0            py38h2531618_0
      lcms2                     2.11                 h396b838_0
      ld_impl_linux-64          2.33.1               h53a641e_7
      libedit                   3.1.20191231         h14c3975_1
      libffi                    3.3                  he6710b0_2
      libgcc-ng                 9.1.0                hdf63c60_0
      libgfortran-ng            7.3.0                hdf63c60_0
      libpng                    1.6.37               hbc83047_0
      libprotobuf               3.13.0.1             h8b12597_0    conda-forge
      libsodium                 1.0.18               h7b6447c_0
      libstdcxx-ng              9.1.0                hdf63c60_0
      libtiff                   4.1.0                h2733197_1
      libuuid                   1.0.3                h1bed415_2
      libxcb                    1.14                 h7b6447c_0
      libxml2                   2.9.10               hb55368b_3
      lmfit                     1.0.1                      py_1    conda-forge
      lz4-c                     1.9.2                heb0550a_3
      mako                      1.1.3              pyh9f0ad1d_0    conda-forge
      markdown                  3.3.3                    pypi_0    pypi
      markupsafe                1.1.1            py38h7b6447c_0
      matplotlib                3.3.2                         0
      matplotlib-base           3.3.2            py38h817c723_0
      mistune                   0.8.4           py38h7b6447c_1000
      mkl                       2020.2                      256
      mkl-service               2.3.0            py38he904b0f_0
      mkl_fft                   1.2.0            py38h23d657b_0
      mkl_random                1.1.1            py38h0573a6f_0
      mlflow                    1.11.0           py38h32f6830_1    conda-forge
      msrest                    0.6.19             pyh9f0ad1d_0    conda-forge
      multipletau               0.3.3                    pypi_0    pypi
      nbclient                  0.5.1                      py_0
      nbconvert                 6.0.7                    py38_0
      nbformat                  5.0.8                      py_0
      ncurses                   6.2                  he6710b0_1
      nest-asyncio              1.4.1                      py_0
      notebook                  6.1.4                    py38_0
      numpy                     1.19.2           py38h54aff64_0
      numpy-base                1.19.2           py38hfa32c7d_0
      oauthlib                  3.0.1                      py_0    conda-forge
      olefile                   0.46                       py_0
      openssl                   1.1.1h               h516909a_0    conda-forge
      opt-einsum                3.3.0                    pypi_0    pypi
      packaging                 20.4                       py_0
      pandas                    1.1.3            py38he6710b0_0
      pandoc                    2.11                 hb0f4dca_0
      pandocfilters             1.4.2                    py38_1
      parso                     0.7.0                      py_0
      pcre                      8.44                 he6710b0_0
      pexpect                   4.8.0                    py38_0
      pickleshare               0.7.5                 py38_1000
      pillow                    8.0.1            py38he98fc37_0
      pip                       20.2.4                   py38_0
      prometheus_client         0.8.0                      py_0
      prometheus_flask_exporter 0.18.1             pyh9f0ad1d_0    conda-forge
      prompt-toolkit            3.0.8                      py_0
      protobuf                  3.13.0.1         py38h950e882_1    conda-forge
      ptyprocess                0.6.0                    py38_0
      pyasn1                    0.4.8                    pypi_0    pypi
      pyasn1-modules            0.2.8                    pypi_0    pypi
      pycparser                 2.20                       py_2
      pygments                  2.7.2              pyhd3eb1b0_0
      pyjwt                     1.7.1                      py_0    conda-forge
      pyopenssl                 19.1.0                     py_1
      pyparsing                 2.4.7                      py_0
      pyqt                      5.9.2            py38h05f1152_4
      pyrsistent                0.17.3           py38h7b6447c_0
      pysocks                   1.7.1                    py38_0
      python                    3.8.5                h7579374_1
      python-dateutil           2.8.1                      py_0
      python-editor             1.0.4                      py_0    conda-forge
      python_abi                3.8                      1_cp38    conda-forge
      pytz                      2020.1                     py_0
      pyyaml                    5.3.1            py38h8df0ef7_1    conda-forge
      pyzmq                     19.0.2           py38he6710b0_1
      qt                        5.9.7                h5867ecd_1
      querystring_parser        1.2.4                      py_0    conda-forge
      readline                  8.0                  h7b6447c_0
      requests                  2.24.0                     py_0
      requests-oauthlib         1.3.0              pyh9f0ad1d_0    conda-forge
      rsa                       4.6                      pypi_0    pypi
      scipy                     1.5.2            py38h0b6359f_0
      seaborn                   0.11.0                     py_0
      send2trash                1.5.0                    py38_0
      setuptools                50.3.0           py38hb0f4dca_1
      sip                       4.19.13          py38he6710b0_0
      six                       1.15.0                     py_0
      smmap                     3.0.4              pyh9f0ad1d_0    conda-forge
      sqlalchemy                1.3.13           py38h516909a_0    conda-forge
      sqlite                    3.33.0               h62c20be_0
      sqlparse                  0.4.1              pyh9f0ad1d_0    conda-forge
      tabulate                  0.8.7              pyh9f0ad1d_0    conda-forge
      tb-nightly                2.4.0a20201102           pypi_0    pypi
      tensorboard-plugin-wit    1.7.0                    pypi_0    pypi
      termcolor                 1.1.0                    pypi_0    pypi
      terminado                 0.9.1                    py38_0
      testpath                  0.4.4                      py_0
      tf-estimator-nightly      2.4.0.dev2020102301          pypi_0    pypi
      tf-nightly                2.5.0.dev20201029          pypi_0    pypi
      tifffile                  2020.10.1        py38hdd07704_2
      tk                        8.6.10               hbc83047_0
      tornado                   6.0.4            py38h7b6447c_1
      traitlets                 5.0.5                      py_0
      typing-extensions         3.7.4.3                  pypi_0    pypi
      uncertainties             3.1.5              pyhd8ed1ab_0    conda-forge
      urllib3                   1.25.11                    py_0
      wcwidth                   0.2.5                      py_0
      webencodings              0.5.1                    py38_1
      websocket-client          0.57.0           py38h32f6830_3    conda-forge
      werkzeug                  1.0.1              pyh9f0ad1d_0    conda-forge
      wheel                     0.35.1                     py_0
      wrapt                     1.12.1                   pypi_0    pypi
      xz                        5.2.5                h7b6447c_0
      yaml                      0.2.5                h516909a_0    conda-forge
      zeromq                    4.3.3                he6710b0_3
      zipp                      3.4.0              pyhd3eb1b0_0
      zlib                      1.2.11               h7b6447c_3
      zstd                      1.4.5                h9ceee32_0

      Note: you may need to restart the kernel to use updated packages.
      {'SLURM_CHECKPOINT_IMAGE_DIR': '/var/slurm/checkpoint',
       'SLURM_NODELIST': 'node146',
       'SLURM_JOB_NAME': 'bash',
       'XDG_SESSION_ID': '9639',
       'SLURMD_NODENAME': 'node146',
       'SLURM_TOPOLOGY_ADDR': 'node146',
       'SLURM_NTASKS_PER_NODE': '24',
       'HOSTNAME': 'login01',
       'SLURM_PRIO_PROCESS': '0',
       'SLURM_SRUN_COMM_PORT': '43120',
       'SHELL': '/bin/bash',
       'TERM': 'xterm-color',
       'SLURM_JOB_QOS': 'qstand',
       'SLURM_PTY_WIN_ROW': '24',
       'HISTSIZE': '1000',
       'TMPDIR': '/tmp',
       'SLURM_TOPOLOGY_ADDR_PATTERN': 'node',
       'SSH_CLIENT': '10.231.210.198 43508 22',
       'CONDA_SHLVL': '2',
       'CONDA_PROMPT_MODIFIER': '(tf-nightly) ',
       'WINDOWID': '0',
       'QTDIR': '/usr/lib64/qt-3.3',
       'QTINC': '/usr/lib64/qt-3.3/include',
       'SSH_TTY': '/dev/pts/5',
       'QT_GRAPHICSSYSTEM_CHECKED': '1',
       'SLURM_NNODES': '1',
       'USER': 'ye53nis',
       'http_proxy': 'http://internet4nzm.rz.uni-jena.de:3128',
       'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=01;36:*.au=01;36:*.flac=01;36:*.mid=01;36:*.midi=01;36:*.mka=01;36:*.mp3=01;36:*.mpc=01;36:*.ogg=01;36:*.ra=01;36:*.wav=01;36:*.axa=01;36:*.oga=01;36:*.spx=01;36:*.xspf=01;36:',
       'CONDA_EXE': '/cluster/miniconda3/bin/conda',
       'SLURM_STEP_NUM_NODES': '1',
       'SLURM_JOBID': '534856',
       'SRUN_DEBUG': '3',
       'SLURM_NTASKS': '24',
       'SLURM_LAUNCH_NODE_IPADDR': '192.168.192.5',
       'SLURM_STEP_ID': '0',
       'TMUX': '/tmp/tmux-67339/default,27827,6',
       '_CE_CONDA': '',
       'CONDA_PREFIX_1': '/cluster/miniconda3',
       'SLURM_STEP_LAUNCHER_PORT': '43120',
       'SLURM_TASKS_PER_NODE': '24',
       'MAIL': '/var/spool/mail/ye53nis',
       'PATH': '/home/ye53nis/.conda/envs/tf-nightly/bin:/home/lex/Programme/miniconda3/envs/tf-nightly-lab/bin:/home/lex/Programme/miniconda3/condabin:/home/lex/.local/bin:/bin:/usr/bin:/usr/local/bin:/usr/local/sbin:/usr/lib/jvm/default/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/var/lib/snapd/snap/bin:/home/lex/Programme/miniconda3/bin:/usr/sbin:/home/ye53nis/.local/bin:/home/ye53nis/bin',
       'SLURM_WORKING_CLUSTER': 'hpc:192.168.192.1:6817:8448',
       'SLURM_JOB_ID': '534856',
       'CONDA_PREFIX': '/home/ye53nis/.conda/envs/tf-nightly',
       'SLURM_JOB_USER': 'ye53nis',
       'SLURM_STEPID': '0',
       'PWD': '/',
       'SLURM_SRUN_COMM_HOST': '192.168.192.5',
       'LANG': 'en_US.UTF-8',
       'SLURM_PTY_WIN_COL': '80',
       'SLURM_UMASK': '0022',
       'MODULEPATH': '/usr/share/Modules/modulefiles:/etc/modulefiles:/cluster/modulefiles',
       'SLURM_JOB_UID': '67339',
       'LOADEDMODULES': '',
       'SLURM_NODEID': '0',
       'TMUX_PANE': '%6',
       'SLURM_SUBMIT_DIR': '/',
       'SLURM_TASK_PID': '53476',
       'SLURM_NPROCS': '24',
       'SLURM_CPUS_ON_NODE': '24',
       'SLURM_DISTRIBUTION': 'block',
       'https_proxy': 'http://internet4nzm.rz.uni-jena.de:3128',
       'SLURM_PROCID': '0',
       'HISTCONTROL': 'ignoredups',
       '_CE_M': '',
       'SLURM_JOB_NODELIST': 'node146',
       'SLURM_PTY_PORT': '46638',
       'HOME': '/home/ye53nis',
       'SHLVL': '3',
       'SLURM_LOCALID': '0',
       'SLURM_JOB_GID': '13280',
       'SLURM_JOB_CPUS_PER_NODE': '24',
       'SLURM_CLUSTER_NAME': 'hpc',
       'SLURM_GTIDS': '0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23',
       'SLURM_SUBMIT_HOST': 'login01',
       'SLURM_JOB_PARTITION': 's_standard',
       'MATHEMATICA_HOME': '/cluster/apps/mathematica/11.3',
       'CONDA_PYTHON_EXE': '/cluster/miniconda3/bin/python',
       'LOGNAME': 'ye53nis',
       'SLURM_STEP_NUM_TASKS': '24',
       'QTLIB': '/usr/lib64/qt-3.3/lib',
       'SLURM_JOB_ACCOUNT': 'iaob',
       'SLURM_JOB_NUM_NODES': '1',
       'MODULESHOME': '/usr/share/Modules',
       'CONDA_DEFAULT_ENV': 'tf-nightly',
       'LESSOPEN': '||/usr/bin/lesspipe.sh %s',
       'SLURM_STEP_TASKS_PER_NODE': '24',
       'PORT': '9999',
       'SLURM_STEP_NODELIST': 'node146',
       'DISPLAY': ':0',
       'XDG_RUNTIME_DIR': '',
       'XAUTHORITY': '/home/lex/.Xauthority',
       'BASH_FUNC_module()': '() {  eval `/usr/bin/modulecmd bash $*`\n}',
       '_': '/home/ye53nis/.conda/envs/tf-nightly/bin/jupyter',
       'JPY_PARENT_PID': '54410',
       'CLICOLOR': '1',
       'PAGER': 'cat',
       'GIT_PAGER': 'cat',
       'MPLBACKEND': 'module://ipykernel.pylab.backend_inline'}
    #+end_example

*** set variables
    :PROPERTIES:
    :header-args:jupyter-python: :session /jpy:localhost#9999:f6f8ea4a-c473-459c-93b6-4984b0987ff8
    :END:
    - any files generated using the =:file= header of org-mode source blocks
      will be saved here (Note: the destination of the simulations is different,
      see the variables below)
    #+BEGIN_SRC  emacs-lisp
      (setq org-babel-jupyter-resource-directory "./data/exp-201231-clustsim")
    #+END_SRC

    #+RESULTS:
    : ./data/exp-201231-clustsim

    #+BEGIN_SRC jupyter-python
      import sys
      sys.path.append('/beegfs/ye53nis/drmed-git/src/')
      from fluotracify.simulations import simulate_trace_with_artifact as stwa
    #+END_SRC

    #+RESULTS:

    #+BEGIN_SRC jupyter-python
      folder = '/beegfs/ye53nis/saves/firstartifact_Nov2020/'
      file_name = 'traces_brightclust_Nov2020'
      total_sim_time = 16384
      d_mol_arr = [0.069, 0.08, 0.1, 0.2, 0.4, 0.6, 1.0, 3.0, 10, 50]
      col_per_example = 3
      label_for = 'both'
      number_of_sets = 10
      traces_per_set = 100
      artifact = 1
    #+END_SRC

    #+RESULTS:
    - for each diffusion constant given in =d_mol_arr=, 10 .csv files will be
      generated (=number_of_sets=) which each comprise of 100 fluorescence
      traces (=traces_per_set=)
    - The output of the function will be written to stdout (the terminal inside
      a tmux session on the machine where the notebook is running). Thus, Emacs
      can be closed. After the simulations are done, the printed output can
      be copied from the terminal, because tmux is making it possible to attach
      and detach to a running terminal session.
    #+BEGIN_SRC jupyter-python
      sys.stdout = open('/dev/stdout', 'w')
    #+END_SRC

    #+RESULTS:
*** Do the simulation
    #+BEGIN_SRC jupyter-python :results drawer
       stwa.produce_training_data(folder=folder,
                                  file_name=file_name,
                                  col_per_example=col_per_example,
                                  number_of_sets=number_of_sets,
                                  traces_per_set=traces_per_set,
                                  total_sim_time=total_sim_time,
                                  artifact=1,
                                  d_mol_arr=d_mol_arr,
                                  label_for=label_for)
     #+END_SRC

     #+RESULTS:
     :results:
     : 354a0d72-5d50-4e51-b971-a52c0cf8f572
     :end:
     - Note: the results were printed to the terminal, but I didn't think of the
       terminal history limit of tmux, which is at around 1800 lines. This
       means, most of the history couldn't be saved. Here is an example of the
       output:

       #+begin_example
       Set 10 ------------------------
       num_of_steps 16384
       Processing tracks: [=================== ] 99% complete
       Processing FWHM 250, num_of_steps 16384
       Processing tracks: [=================   ] 85% complete
       Processing FWHM 250,
       Trace 1: Nmol: 2621 d_mol: 50 Cluster multiplier: 9000
       num_of_steps 16384
       Processing tracks: [=================== ] 99% complete
       Processing FWHM 250, num_of_steps 16384
       Processing tracks: [=================   ] 85% complete
       Processing FWHM 250,
       Trace 2: Nmol: 2621 d_mol: 50 Cluster multiplier: 5000
       num_of_steps 16384
       Processing tracks: [=================== ] 99% complete
       Processing FWHM 250, num_of_steps 16384
       Processing tracks: [=================   ] 85% complete
       Processing FWHM 250,
       Trace 3: Nmol: 2621 d_mol: 50 Cluster multiplier: 5000
       num_of_steps 16384
       Processing tracks: [=================== ] 99% complete
       Processing FWHM 250, num_of_steps 16384
       Processing tracks: [=================   ] 85% complete
       Processing FWHM 250,
       Trace 4: Nmol: 2621 d_mol: 50 Cluster multiplier: 9000
       num_of_steps 16384
       Processing tracks: [=================== ] 99% complete
       Processing FWHM 250, num_of_steps 16384
       Processing tracks: [=================   ] 85% complete
       Processing FWHM 250,
       Trace 5: Nmol: 2621 d_mol: 50 Cluster multiplier: 7000
       num_of_steps 16384
       Processing tracks: [=================== ] 99% complete
       Processing FWHM 250, num_of_steps 16384
       Processing tracks: [=================   ] 85% complete
       Processing FWHM 250,
       Trace 6: Nmol: 2621 d_mol: 50 Cluster multiplier: 8000
       num_of_steps 16384
       Processing tracks: [=================== ] 99% complete
       Processing FWHM 250, num_of_steps 16384
       Processing tracks: [=================   ] 85% complete
       Processing FWHM 250,
       Trace 7: Nmol: 2621 d_mol: 50 Cluster multiplier: 7000
       num_of_steps 16384
       Processing tracks: [=================== ] 99% complete
       Processing FWHM 250, num_of_steps 16384
       Processing tracks: [=================   ] 85% complete
       Processing FWHM 250,
       Trace 8: Nmol: 2621 d_mol: 50 Cluster multiplier: 5000
       num_of_steps 16384
       Processing tracks: [=================== ] 99% complete
       Processing FWHM 250, num_of_steps 16384
       Processing tracks: [=================   ] 85% complete
       Processing FWHM 250,
       Trace 9: Nmol: 2621 d_mol: 50 Cluster multiplier: 9000
       num_of_steps 16384
       Processing tracks: [=================== ] 99% complete
       Processing FWHM 250, num_of_steps 16384
       Processing tracks: [=================   ] 85% complete
       Processing FWHM 250,
       Trace 10: Nmol: 2621 d_mol: 50 Cluster multiplier: 9000
       num_of_steps 16384
       Processing tracks: [=================== ] 99% complete
       Processing FWHM 250, num_of_steps 16384
       Processing tracks: [=================   ] 85% complete
       Processing FWHM 250,
       #+end_example

*** Learnings
    - next time: save output of simulation function not to terminal, but to .txt
      file.
